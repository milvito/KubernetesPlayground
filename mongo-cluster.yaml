## Creates mongoDB cluster on kubernetes using StatefulSets of n nodes
apiVersion: v1
kind: ConfigMap
metadata:
    name: mongo-init
data:
    init.sh: |
        #!/bin/bash
        # Need to wait for the readiness health check to pass so that the
        # mongo names resolve. This is kind of wonky.
        until ping -c 1 ${HOSTNAME}.mongo; do
            echo "waiting for DNS (${HOSTNAME}.mongo)..."
            sleep 2
        done

        until /usr/bin/mongo --eval 'printjson(db.serverStatus())'; do
            echo "connecting to local mongo..."
            sleep 2
        done

        echo "connected to local."
        HOST=mongo-0.mongo:27017
        until /usr/bin/mongo --host=${HOST} --eval 'printjson(db.serverStatus())'; do
            echo "connecting to remote mongo..."
            sleep 2
        done
        echo "connected to remote."
        if [[ "${HOSTNAME}" != 'mongo-0' ]]; then
            until /usr/bin/mongo --host=${HOST} --eval="printjson(rs.status())" \
                | grep "members"; do
            echo "waiting for replication set initialization"
            sleep 2
        done
        echo "adding self to mongo-0"
        until /usr/bin/mongo --host=${HOST} \
            --eval="printjson(rs.add('${HOSTNAME}.mongo'))" |grep '{ "ok" : 1 }'; do
              echo "Failed to add, retrying..."
              sleep 2
            done
        fi

        if [[ "${HOSTNAME}" == 'mongo-0' ]]; then
            echo "initializing replica set"
            until /usr/bin/mongo --eval="printjson(rs.initiate(\
                {'_id': 'rs0', 'members': [{'_id': 0, \
                'host': 'mongo-0.mongo:27017'}]}))" | grep '{ "ok" : 1 }'; do
                echo "Failed to initialize replica set, retrying..."
                sleep 2
            done 
        fi
        echo "initialized"
        while true; do
        sleep 3600
        done
---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  ports:
  - port: 27017
    name: peer
  clusterIP: None
  selector:
    app: mongo
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
spec:
  # modify replicas according to your case
  serviceName: "mongo"
  replicas: 5
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mongodb
        image: mongo:3.4.1
        command:
        - mongod
        - --replSet
        - rs0
        ports:
        - containerPort: 27017
          name: peer
      - name: init-mongo
        image: mongo:3.4.1
        command:
        - bash
        - /config/init.sh
        volumeMounts:
        - name: config
          mountPath: /config
      volumes:
      - name: config
        configMap:
          name: "mongo-init" 
